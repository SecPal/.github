# SPDX-FileCopyrightText: 2025 SecPal
# SPDX-License-Identifier: AGPL-3.0-or-later

name: Auto-request Copilot Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  request-copilot-review:
    name: Request Copilot Review
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      actions: write
      checks: read
    steps:
      - name: Request Copilot review
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;

            // Copilot reviews cannot be requested programmatically via the GitHub API.
            // This workflow serves as a reminder in the Actions log.
            core.info('╔════════════════════════════════════════════════════════╗');
            core.info('║  📝 REMINDER: Request a Copilot Review                 ║');
            core.info('║                                                        ║');
            core.info('║  Copilot reviews must be requested manually via:      ║');
            core.info('║  1. GitHub UI (PR page)                                ║');
            core.info('║  2. GitHub CLI: gh pr review --copilot                 ║');
            core.info('║  3. API call (if you have the right permissions)       ║');
            core.info('║                                                        ║');
            core.info('║  This ensures code quality before merging! ✨          ║');
            core.info('╚════════════════════════════════════════════════════════╝');

      - name: Wait for Copilot review and re-trigger check
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const COPILOT_REVIEWER_PREFIX = 'copilot-pull-request-reviewer';
            const MAX_WAIT_MS = 120000; // 2 minutes
            const POLL_INTERVAL_MS = 10000; // 10 seconds

            core.info('Waiting for Copilot review to appear...');
            const startTime = Date.now();
            let reviewFound = false;

            while (Date.now() - startTime < MAX_WAIT_MS && !reviewFound) {
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              const copilotReviews = reviews.filter(r =>
                r.user.login.startsWith(COPILOT_REVIEWER_PREFIX) && r.user.type === 'Bot'
              );

            if (copilotReviews.length > 0) {
              reviewFound = true;
              core.info('✓ Copilot review detected! Triggering check re-run...');

              // Get workflow runs for this PR
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event: 'pull_request',
                status: 'completed',
                per_page: 50
              });

              // Find the latest failed Copilot Review Check run for this PR
              const failedRun = workflowRuns.workflow_runs.find(run =>
                run.name === 'Copilot Review Check' &&
                run.head_sha === context.payload.pull_request.head.sha &&
                run.conclusion === 'failure'
              );

              if (failedRun) {
                core.info(`Re-running workflow run ${failedRun.id}...`);
                try {
                  await github.rest.actions.reRunWorkflowFailedJobs({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: failedRun.id
                  });
                  core.info('✓ Workflow re-run triggered!');
                } catch (error) {
                  core.warning(`Failed to re-run workflow: ${error.message}`);
                }
              } else {
                core.info('No failed Copilot Review Check run found for this commit');
              }
              break;
            }              const elapsed = Math.round((Date.now() - startTime) / 1000);
              core.info(`${elapsed}s: No review yet, waiting...`);
              await new Promise(resolve => setTimeout(resolve, POLL_INTERVAL_MS));
            }

            if (!reviewFound) {
              core.warning('Timeout waiting for Copilot review');
            }
