# SPDX-FileCopyrightText: 2025 SecPal
# SPDX-License-Identifier: AGPL-3.0-or-later

name: Reusable - PHP Tests (PEST)

on:
  workflow_call:
    inputs:
      php-version:
        description: "PHP version to use"
        required: false
        type: string
        default: "8.4"
      composer-install-flags:
        description: "Flags for composer install"
        required: false
        type: string
        default: "--prefer-dist --no-progress --no-interaction"
      test-command:
        description: "Command to run tests"
        required: false
        type: string
        default: "./vendor/bin/pest"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: xdebug

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> "$GITHUB_OUTPUT"

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        env:
          COMPOSER_FLAGS: ${{ inputs.composer-install-flags }}
        run: |
          # shellcheck disable=SC2086
          # Word splitting is intentional - flags must expand as separate arguments.
          # Security consideration: $COMPOSER_FLAGS comes from workflow input
          # (inputs.composer-install-flags). This input should only be provided
          # by trusted workflow callers. Avoid allowing untrusted users to set
          # this input because it could change install behavior.
          composer install $COMPOSER_FLAGS

      - name: Run tests
        env:
          TEST_CMD: ${{ inputs.test-command }}
        run: $TEST_CMD
