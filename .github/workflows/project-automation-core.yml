# SPDX-FileCopyrightText: 2025 SecPal
# SPDX-License-Identifier: CC0-1.0

# Core reusable workflow for project board automation
# This is a PURE reusable workflow - workflow_call ONLY, no direct events!
#
# Called by:
# - .github repo: project-automation-v2.yml (for direct events)
# - api repo: .github/workflows/project-automation.yml
# - frontend repo: .github/workflows/project-automation.yml
# - contracts repo: .github/workflows/project-automation.yml

name: Project Board Automation (Core)

on:
  workflow_call:
    secrets:
      PROJECT_TOKEN:
        description: "Fine-grained PAT with Projects (Read & Write) and Issues (Read & Write) permissions"
        required: false

env:
  PROJECT_ID: PVT_kwDOCUodoc4BGgjL
  STATUS_FIELD_ID: PVTSSF_lADOCUodoc4BGgjLzg3iI0Y

jobs:
  # ============================================================================
  # JOB 1: Handle Issue Events (opened, reopened, closed)
  # ============================================================================
  handle-issue:
    name: Handle issue lifecycle events
    if: github.event.issue != null
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Debug - Check if PROJECT_TOKEN is available
        run: |
          if [ -z "$PROJECT_TOKEN" ]; then
            echo "❌ PROJECT_TOKEN is EMPTY or not available"
            echo "This indicates the secret was not passed to the reusable workflow"
          else
            echo "✅ PROJECT_TOKEN is available (length: $(echo -n "$PROJECT_TOKEN" | wc -c))"
          fi
        env:
          PROJECT_TOKEN: ${{ secrets.PROJECT_TOKEN }}

      - name: Add issue to project (if opened/reopened)
        id: add-to-project
        if: contains(fromJSON('["opened", "reopened"]'), github.event.action)
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const projectId = process.env.PROJECT_ID;
            const contentId = context.payload.issue.node_id;

            const mutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }
            `;

            try {
              const result = await github.graphql(mutation, { projectId, contentId });
              const itemId = result.addProjectV2ItemById.item.id;
              core.setOutput('itemId', itemId);
              core.setOutput('success', 'true');
              console.log('✅ Added to project, item ID:', itemId);
              return itemId;
            } catch (error) {
              core.setOutput('success', 'false');
              console.error('❌ Failed to add to project:', error.message);
              throw error;
            }

      - name: Determine status for new/reopened issues
        id: determine-status
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        run: |
          ACTION="${{ github.event.action }}"
          LABELS='${{ toJSON(github.event.issue.labels.*.name) }}'

          # Check for specific labels
          CORE_FEATURE=$(echo "$LABELS" | jq 'contains(["core-feature"])')
          BLOCKER=$(echo "$LABELS" | jq 'contains(["priority: blocker"])')

          if [[ "$ACTION" == "reopened" ]]; then
            # Reopened issues go to Discussion
            {
              echo "status=💬 Discussion"
              echo "statusId=e2ca3f9c"
              echo "reason=Issue reopened - needs discussion"
            } >> "$GITHUB_OUTPUT"
          elif [[ "$CORE_FEATURE" == "true" ]]; then
            # Core features are planned
            {
              echo "status=📋 Planned"
              echo "statusId=aa8c7fe5"
              echo "reason=Core feature - scheduled for implementation"
            } >> "$GITHUB_OUTPUT"
          elif [[ "$BLOCKER" == "true" ]]; then
            # Blockers go to backlog
            {
              echo "status=📥 Backlog"
              echo "statusId=53395960"
              echo "reason=High priority - needs immediate attention"
            } >> "$GITHUB_OUTPUT"
          else
            # Everything else starts as idea
            {
              echo "status=💡 Ideas"
              echo "statusId=88b56a57"
              echo "reason=New idea - needs discussion and evaluation"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Determine status for closed issues
        id: determine-closed-status
        if: github.event.action == 'closed'
        run: |
          STATE_REASON="${{ github.event.issue.state_reason }}"

          if [[ "$STATE_REASON" == "completed" ]]; then
            {
              echo "status=✅ Done"
              echo "statusId=d8103dfe"
              echo "reason=Issue completed successfully"
            } >> "$GITHUB_OUTPUT"
          elif [[ "$STATE_REASON" == "not_planned" ]]; then
            {
              echo "status=🚫 Won't Do"
              echo "statusId=6df780dd"
              echo "reason=Closed as not planned"
            } >> "$GITHUB_OUTPUT"
          else
            # Fallback for other close reasons (e.g., duplicate)
            {
              echo "status=🚫 Won't Do"
              echo "statusId=6df780dd"
              echo "reason=Closed: $STATE_REASON"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Get project item ID for status update
        id: get-item-id
        if: github.event.action == 'closed'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const issueNodeId = context.payload.issue.node_id;
            const projectId = process.env.PROJECT_ID;

            const query = `
              query($issueNodeId: ID!) {
                node(id: $issueNodeId) {
                  ... on Issue {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }
            `;

            try {
              const result = await github.graphql(query, { issueNodeId });
              const items = result.node.projectItems.nodes;
              const projectItem = items.find(item => item.project.id === projectId);

              if (projectItem) {
                core.setOutput('itemId', projectItem.id);
                core.setOutput('found', 'true');
                console.log('✅ Found project item:', projectItem.id);
              } else {
                core.setOutput('found', 'false');
                console.log('⚠️ Issue not in project');
              }
            } catch (error) {
              core.setOutput('found', 'false');
              console.error('❌ Failed to find project item:', error.message);
            }

      - name: Update project status
        if: |
          (steps.add-to-project.outputs.success == 'true' && steps.determine-status.outputs.statusId) ||
          (steps.get-item-id.outputs.found == 'true' && steps.determine-closed-status.outputs.statusId)
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const projectId = process.env.PROJECT_ID;
            const fieldId = process.env.STATUS_FIELD_ID;
            const itemId = '${{ steps.add-to-project.outputs.itemId || steps.get-item-id.outputs.itemId }}';
            const optionId = '${{ steps.determine-status.outputs.statusId || steps.determine-closed-status.outputs.statusId }}';
            const status = '${{ steps.determine-status.outputs.status || steps.determine-closed-status.outputs.status }}';

            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `;

            try {
              await github.graphql(mutation, { projectId, itemId, fieldId, optionId });
              console.log('✅ Status updated to:', status);
            } catch (error) {
              console.error('❌ Failed to update status:', error.message);
              // Don't fail the workflow
            }

      - name: Comment on issue
        if: contains(fromJSON('["opened", "reopened"]'), github.event.action)
        uses: actions/github-script@v8
        with:
          script: |
            const action = context.payload.action;
            const status = '${{ steps.determine-status.outputs.status }}';
            const reason = '${{ steps.determine-status.outputs.reason }}';
            const addedToProject = '${{ steps.add-to-project.outputs.success }}' === 'true';

            const emoji = addedToProject ? '✅' : '⚠️';
            const verb = action === 'reopened' ? 'reopened and added back to' : 'added to';

            const message = addedToProject
              ? `${emoji} This issue has been ${verb} the [SecPal Feature Roadmap](https://github.com/orgs/SecPal/projects/1) with status: **${status}**\n\n_${reason}_`
              : `⚠️ Could not automatically add to project. Status would be: **${status}**\n\n_${reason}_`;

            const statusFlow = `
            **Status Flow:**
            💡 Ideas → 💬 Discussion → 📥 Backlog → 📋 Planned → 🚧 In Progress → 👀 In Review → ✅ Done

            _Note: Ideas that won't be implemented should be moved to 🚫 Won't Do with a reason._`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${message}\n${statusFlow}`
            });

  # ============================================================================
  # JOB 2: Handle Pull Request Events
  # ============================================================================
  handle-pull-request:
    name: Handle pull request lifecycle events
    if: github.event.pull_request != null
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      issues: write
      contents: read
    steps:
      - name: Extract linked issues
        id: linked-issues
        uses: actions/github-script@v8
        with:
          script: |
            const body = context.payload.pull_request.body || '';

            // Regex to find "closes #123", "fixes #456", etc.
            const regex = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi;
            const matches = [...body.matchAll(regex)];
            const issueNumbers = matches.map(m => parseInt(m[1]));

            core.setOutput('issues', JSON.stringify(issueNumbers));
            core.setOutput('count', issueNumbers.length.toString());
            console.log('Found linked issues:', issueNumbers);

      - name: Determine PR status
        id: pr-status
        run: |
          ACTION="${{ github.event.action }}"
          MERGED="${{ github.event.pull_request.merged }}"
          DRAFT="${{ github.event.pull_request.draft }}"

          if [[ "$ACTION" == "closed" && "$MERGED" == "true" ]]; then
            # PR merged → Done
            {
              echo "status=✅ Done"
              echo "statusId=d8103dfe"
              echo "reason=Pull request merged"
              echo "shouldUpdate=true"
            } >> "$GITHUB_OUTPUT"
          elif [[ "$ACTION" == "opened" && "$DRAFT" == "true" ]]; then
            # Draft PR opened → In Progress
            {
              echo "status=🚧 In Progress"
              echo "statusId=d20ace06"
              echo "reason=Draft PR opened - work in progress"
              echo "shouldUpdate=true"
            } >> "$GITHUB_OUTPUT"
          elif [[ "$ACTION" == "opened" && "$DRAFT" == "false" ]] || [[ "$ACTION" == "ready_for_review" ]]; then
            # Non-draft PR opened or ready for review → In Review
            {
              echo "status=👀 In Review"
              echo "statusId=fc39b4e9"
              echo "reason=Pull request ready for review"
              echo "shouldUpdate=true"
            } >> "$GITHUB_OUTPUT"
          elif [[ "$ACTION" == "converted_to_draft" ]]; then
            # PR converted to draft → In Progress
            {
              echo "status=🚧 In Progress"
              echo "statusId=d20ace06"
              echo "reason=Converted to draft - changes in progress"
              echo "shouldUpdate=true"
            } >> "$GITHUB_OUTPUT"
          else
            # No status update needed
            echo "shouldUpdate=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update linked issues status
        if: steps.linked-issues.outputs.count != '0' && steps.pr-status.outputs.shouldUpdate == 'true'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const issueNumbers = JSON.parse('${{ steps.linked-issues.outputs.issues }}');
            const projectId = process.env.PROJECT_ID;
            const fieldId = process.env.STATUS_FIELD_ID;
            const optionId = '${{ steps.pr-status.outputs.statusId }}';
            const status = '${{ steps.pr-status.outputs.status }}';

            for (const issueNumber of issueNumbers) {
              try {
                // Get issue node ID
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });

                // Find project item
                const query = `
                  query($issueNodeId: ID!) {
                    node(id: $issueNodeId) {
                      ... on Issue {
                        projectItems(first: 10) {
                          nodes {
                            id
                            project { id }
                          }
                        }
                      }
                    }
                  }
                `;

                const result = await github.graphql(query, { issueNodeId: issue.node_id });
                const items = result.node.projectItems.nodes;
                const projectItem = items.find(item => item.project.id === projectId);

                if (!projectItem) {
                  console.log(`⚠️ Issue #${issueNumber} not in project, skipping`);
                  continue;
                }

                // Update status
                const mutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { singleSelectOptionId: $optionId }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `;

                await github.graphql(mutation, {
                  projectId,
                  itemId: projectItem.id,
                  fieldId,
                  optionId
                });

                console.log(`✅ Updated issue #${issueNumber} status to: ${status}`);
              } catch (error) {
                console.error(`❌ Failed to update issue #${issueNumber}:`, error.message);
              }
            }

  # ============================================================================
  # JOB 3: Handle Pull Request Review Events
  # ============================================================================
  handle-pr-review:
    name: Handle pull request review events
    if: github.event.review != null && github.event.review.state == 'changes_requested'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      issues: write
      contents: read
    steps:
      - name: Extract linked issues
        id: linked-issues
        uses: actions/github-script@v8
        with:
          script: |
            const body = context.payload.pull_request.body || '';
            const regex = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/gi;
            const matches = [...body.matchAll(regex)];
            const issueNumbers = matches.map(m => parseInt(m[1]));

            core.setOutput('issues', JSON.stringify(issueNumbers));
            core.setOutput('count', issueNumbers.length.toString());

      - name: Update linked issues to In Progress
        if: steps.linked-issues.outputs.count != '0'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const issueNumbers = JSON.parse('${{ steps.linked-issues.outputs.issues }}');
            const projectId = process.env.PROJECT_ID;
            const fieldId = process.env.STATUS_FIELD_ID;
            const optionId = 'd20ace06'; // In Progress

            for (const issueNumber of issueNumbers) {
              try {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });

                const query = `
                  query($issueNodeId: ID!) {
                    node(id: $issueNodeId) {
                      ... on Issue {
                        projectItems(first: 10) {
                          nodes {
                            id
                            project { id }
                          }
                        }
                      }
                    }
                  }
                `;

                const result = await github.graphql(query, { issueNodeId: issue.node_id });
                const items = result.node.projectItems.nodes;
                const projectItem = items.find(item => item.project.id === projectId);

                if (!projectItem) {
                  console.log(`⚠️ Issue #${issueNumber} not in project, skipping`);
                  continue;
                }

                const mutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { singleSelectOptionId: $optionId }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `;

                await github.graphql(mutation, {
                  projectId,
                  itemId: projectItem.id,
                  fieldId,
                  optionId
                });

                console.log(`✅ Updated issue #${issueNumber} to: 🚧 In Progress`);
              } catch (error) {
                console.error(`❌ Failed to update issue #${issueNumber}:`, error.message);
              }
            }
